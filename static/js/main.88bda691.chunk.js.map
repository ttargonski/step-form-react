{"version":3,"sources":["components/UserDetails.js","components/PersonalDetails.js","components/Confirm.js","components/Success.js","components/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["UserDetails","props","Fragment","className","type","onChange","handleChange","value","values","firstName","placeholder","lastName","email","onClick","nextStep","PersonalDetails","city","occupation","name","gender","backStep","Confirm","handleUpdateData","Success","UserForm","state","step","data","alert","push","setState","input","e","target","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88bda691.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst UserDetails = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"form\">\r\n        <div className=\"form-header\">Enter User Details</div>\r\n        <div className=\"form-inputs\">\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            onChange={props.handleChange(\"firstName\")}\r\n            value={props.values.firstName}\r\n            placeholder=\"First Name\"\r\n          />\r\n          <br />\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            onChange={props.handleChange(\"lastName\")}\r\n            value={props.values.lastName}\r\n            placeholder=\"Last Name\"\r\n          />\r\n          <br />\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            onChange={props.handleChange(\"email\")}\r\n            value={props.values.email}\r\n            placeholder=\"Email Address\"\r\n          />\r\n        </div>\r\n        <div className=\"form-nav\">\r\n          <button onClick={props.nextStep}>Continue</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-footer\">\r\n        <p>\r\n          Do you have an account? <button>Sign In</button>\r\n        </p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserDetails;\r\n","import React from \"react\";\r\n\r\nconst PersonalDetails = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"form\">\r\n        <div className=\"form-header\">Enter Personal Details</div>\r\n        <div className=\"form-inputs\">\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            onChange={props.handleChange(\"city\")}\r\n            value={props.values.city}\r\n            placeholder=\"City\"\r\n          />\r\n          <br />\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            onChange={props.handleChange(\"occupation\")}\r\n            value={props.values.occupation}\r\n            placeholder=\"Occupation\"\r\n          />\r\n          <br />\r\n          <select\r\n            className=\"form-input\"\r\n            name=\"gender\"\r\n            onChange={props.handleChange(\"gender\")}\r\n            value={props.values.gender}\r\n          >\r\n            <option value=\"Male\">Male</option>\r\n            <option value=\"Female\">Female</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"form-nav\">\r\n          <button onClick={props.backStep}>Back</button>\r\n          <button onClick={props.nextStep}>Continue</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-footer\">\r\n        <p>\r\n          Do you have an account? <button className>Sign In</button>\r\n        </p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PersonalDetails;\r\n","import React from \"react\";\r\n\r\nconst Confirm = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"form\">\r\n        <div className=\"form-header\">Confirm the data</div>\r\n        <div className=\"form-confirm\">\r\n          <p>First Name:</p>\r\n          <span className=\"form-confirm-data\"> {props.values.firstName}</span>\r\n\r\n          <p>Last Name:</p>\r\n          <span className=\"form-confirm-data\"> {props.values.lastName}</span>\r\n\r\n          <p>Email:</p>\r\n          <span className=\"form-confirm-data\"> {props.values.email}</span>\r\n\r\n          <p>City:</p>\r\n          <span className=\"form-confirm-data\"> {props.values.city}</span>\r\n\r\n          <p>Occupation:</p>\r\n          <span className=\"form-confirm-data\"> {props.values.occupation}</span>\r\n\r\n          <p>Gender:</p>\r\n          <span className=\"form-confirm-data\"> {props.values.gender}</span>\r\n        </div>\r\n\r\n        <div className=\"form-nav\">\r\n          <button onClick={props.backStep}>Back</button>\r\n          <button className=\"form-confirm-btn\" onClick={props.handleUpdateData}>\r\n            Confirm\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confirm;\r\n","import React from \"react\";\r\n\r\nconst Success = () => {\r\n  return (\r\n    <div className=\"form\">\r\n      <div className=\"form-header\">Success!</div>\r\n      <div className=\"form-success\">\r\n        <p>Thank you for joining us</p>\r\n        <p>Confirm the account by email</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Success;\r\n","import React, { Component } from \"react\";\r\nimport UserDetails from \"./UserDetails\";\r\nimport PersonalDetails from \"./PersonalDetails\";\r\nimport Confirm from \"./Confirm\";\r\nimport Success from \"./Success\";\r\nimport \"./UserForm.css\";\r\n\r\nclass UserForm extends Component {\r\n  state = {\r\n    step: 1,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    city: \"\",\r\n    occupation: \"\",\r\n    gender: \"\",\r\n    data: []\r\n  };\r\n\r\n  // data update\r\n  handleUpdateData = () => {\r\n    let data = [...this.state.data];\r\n\r\n    if (\r\n      this.state.firstName === \"\" ||\r\n      this.state.lastName === \"\" ||\r\n      this.state.email === \"\" ||\r\n      this.state.occupation === \"\" ||\r\n      this.state.city === \"\" ||\r\n      this.state.gender === \"\"\r\n    ) {\r\n      alert(\"Please fill out all fields\");\r\n    } else {\r\n      data.push({\r\n        firstName: `${this.state.firstName}`,\r\n        lastName: `${this.state.lastName}`,\r\n        email: `${this.state.email}`,\r\n        city: `${this.state.city}`,\r\n        occupation: `${this.state.occupation}`,\r\n        gender: `${this.state.gender}`\r\n      });\r\n\r\n      this.setState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        city: \"\",\r\n        occupation: \"\",\r\n        gender: \"\",\r\n        data: data\r\n      });\r\n\r\n      this.nextStep();\r\n    }\r\n  };\r\n\r\n  // next step function\r\n  nextStep = () => {\r\n    const { step } = this.state;\r\n    this.setState({ step: step + 1 });\r\n  };\r\n\r\n  // back step function\r\n  backStep = () => {\r\n    const { step } = this.state;\r\n    this.setState({ step: step - 1 });\r\n  };\r\n\r\n  //  method change values in state\r\n  handleChange = input => e => {\r\n    this.setState({ [input]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { firstName, lastName, email, city, occupation, gender } = this.state;\r\n    const values = { firstName, lastName, email, city, occupation, gender };\r\n\r\n    switch (this.state.step) {\r\n      case 1:\r\n        return (\r\n          <UserDetails\r\n            values={values}\r\n            nextStep={this.nextStep}\r\n            backStep={this.backStep}\r\n            handleChange={this.handleChange}\r\n          />\r\n        );\r\n\r\n      case 2:\r\n        return (\r\n          <PersonalDetails\r\n            values={values}\r\n            nextStep={this.nextStep}\r\n            backStep={this.backStep}\r\n            handleChange={this.handleChange}\r\n          />\r\n        );\r\n\r\n      case 3:\r\n        return (\r\n          <Confirm\r\n            values={values}\r\n            nextStep={this.nextStep}\r\n            backStep={this.backStep}\r\n            handleChange={this.handleChange}\r\n            handleUpdateData={this.handleUpdateData}\r\n          />\r\n        );\r\n\r\n      case 4:\r\n        return (\r\n          <Success\r\n            values={values}\r\n            nextStep={this.nextStep}\r\n            backStep={this.backStep}\r\n            handleChange={this.handleChange}\r\n          />\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserForm;\r\n","import React from \"react\";\nimport UserFrom from \"./components/UserForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserFrom />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}